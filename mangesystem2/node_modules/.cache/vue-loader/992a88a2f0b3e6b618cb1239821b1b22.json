{"remainingRequest":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/src/views/uav/uavmap/index.vue?vue&type=style&index=0&id=c0a9e858&lang=scss&scoped=true&","dependencies":[{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/src/views/uav/uavmap/index.vue","mtime":1677655434007},{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kaesar/Documents/实验室相关/师兄毕设项目前后端/mangesystem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWFwLWNvbnRhaW5lciB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBsZWZ0OiAwOwogICAgcmlnaHQ6IDA7CiAgICB0b3A6IDA7CiAgICBib3R0b206IDA7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIHotaW5kZXg6IDA7Cn0KCi5idXR0b25Hcm91cCB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB6LWluZGV4OiAxOwogICAgbWFyZ2luLXRvcDogMjBweDsKICAgIG1hcmdpbi1sZWZ0OiAyMHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/uav/uavmap","sourcesContent":["<template>\n    <div>\n        <el-radio-group class=\"buttonGroup\" v-model=\"mapId\" @change=\"changeStyle\" size=\"mini\">\n            <el-radio-button label='mapbox/streets-v11' size=\"mini\">平面地图</el-radio-button>\n            <el-radio-button label='mapbox/satellite-v9' size=\"mini\">卫星地图</el-radio-button>\n            <el-radio-button label='mapbox/outdoors-v10' size=\"mini\">户外地图</el-radio-button>\n        </el-radio-group>\n        <buttonpage :editFtButton=\"editFtButton\" @drawLine=\"drawPathLine\" @planRoute=\"planRoute\"\n        @resetAllMarker=\"resetMarkers\" @placeUser=\"addUserMarker\" @placeDepot=\"addDepotMarker\" @pushAll=\"uploadAll\">\n        </buttonpage>\n        <!-- <mission-start :lineInfo=\"lineInfo\" @animateMarkers=\"animateUAV\"></mission-start> -->\n        <div class=\"map-container\" id=\"map-container\"> </div>\n    </div>\n</template>\n\n<script>\n// 引入buttonpage组件\nimport buttonpage from './buttonpage.vue'\nimport MissionStart from './missionStart.vue'\nimport UUID from \"uuid-js\"\nlet layerGroup = {\n    userlayer: null,\n    depotlayer: null,\n    linelayer: null,\n}\n// 导入地图\nexport default {\n    name: 'UavsystemUiIndex',\n    components: {\n        MissionStart,\n        buttonpage\n    },\n\n    data() {\n        return {\n            map: null,\n            layers: null,\n            mapId: 'mapbox/streets-v11',\n            geoLocate: null,\n            editFtButton: {\n                placeUserPoint: false,\n                placeDepotPoint: false,\n                uploadStatus: false,\n                vehicleNumber: null,\n                uuid: null,\n            },\n            lineInfo: {\n                userLength: 0,\n                backendLine: [],\n                pathline: [],\n                // 存储路线的状态\n                drawlineState: [],\n                marker: []\n            },\n            // 用户信息和用户位置信息\n            uploadinfo: {\n                uuid: null,\n                userinfo: [],\n                locationinfo: []\n            },\n            markers: {\n                users: [],\n                depot: null,\n                uav: []\n            },\n            icon: {\n                depotIcon: null,\n                userIcon: null,\n                uavIcon: null,\n            }\n        };\n    },\n\n    mounted() {\n        // 创建地图层\n        this.map = this.$leaflet.createMap(\"map-container\", {\n            minZoom: 1,\n            maxZoom: 20,\n            zoomControl: false,\n            attributionControl: false,\n            //坐标系选择\n            crs: L.CRS.EPSG3857\n        }).fitWorld()\n\n        this.layers = this.$leaflet.createTileLayer(this.map, 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n            // attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            maxZoom: 20,\n            id: this.mapId,\n            tileSize: 512,\n            zoomOffset: -1,\n            accessToken: 'pk.eyJ1IjoidHJhbnNjZW5kdHJlZSIsImEiOiJja3N6eHRiMzkxeXNzMm90Y2Rhd2JmbjNqIn0.bCRv7xB55jHSDwEF5y5DcA'\n        })\n        // this.map.setView([51.505, -0.09], 13);\n        this.$leaflet.zoomControl({ position: 'topright' }).addTo(this.map)\n        this.$leaflet.zoomAttribution(\n            {\n                position: 'bottomright',\n                prefix: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n            }\n        )\n        // 定位\n        this.$leaflet.locate({ position: 'bottomright', initialZoomLevel: 15, setView: \"once\", flyTo: true}).addTo(this.map);\n        // 初始化Icon\n        this.iconInit()\n    },\n\n    methods: {\n        // icon init\n        async iconInit() {\n            this.userIcon = this.$leaflet.createIcon({\n                iconUrl: require(\"@/assets/icons/flyIcon/mobile.png\"),\n                iconSize: [36, 36]\n            })\n            this.depotIcon = this.$leaflet.createIcon({\n                iconUrl: require(\"@/assets/icons/flyIcon/depot.png\"),\n                iconSize: [36, 36]\n            })\n            this.uavIcon = this.$leaflet.createIcon({\n                iconUrl: require(\"@/assets/icons/flyIcon/uav48.svg\"),\n                iconSize: [36, 36]\n            })\n            \n        },\n        // 地图样式改变\n        changeStyle() {\n            this.map.removeLayer(this.layers)\n            this.$leaflet.createTileLayer(this.map, 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n                attribution: 'Map data &copy; wa href=\"https://www.openstreetmap.org/copyright\"wOpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n                maxZoom: 20,\n                id: this.mapId,\n                tileSize: 512,\n                // zoomOffset 注释掉会出大问题\n                zoomOffset: -1,\n                accessToken: 'pk.eyJ1IjoidHJhbnNjZW5kdHJlZSIsImEiOiJja3N6eHRiMzkxeXNzMm90Y2Rhd2JmbjNqIn0.bCRv7xB55jHSDwEF5y5DcA'\n            })\n        },\n        // 输入参数中间函数\n        inputUserLocation(userid, createStamp, e) {\n            let that = this\n            let userString = {}\n            let locationString = {\n                userid: '',\n                serviceTime: '',\n                status: '',\n                geoPoint: {\n                    type: '',\n                    coordinates: []\n                }\n            }\n            userString.mobileId = userid\n            userString.serviceStatus = false\n            userString.uuid = this.uploadinfo.uuid\n            userString.createTime = createStamp\n            // 上传用户信息\n            that.uploadinfo.userinfo.push(userString)\n            locationString.userid = userid\n            locationString.uuid = this.uploadinfo.uuid\n            locationString.serviceTime = createStamp\n            locationString.status = false\n            locationString.geoPoint.coordinates[0] = e.latlng.lat\n            locationString.geoPoint.coordinates[1] = e.latlng.lng\n            locationString.geoPoint.type = \"Point\"\n            // 上传位置信息\n            that.uploadinfo.locationinfo.push(locationString)\n        },\n        addUserMarker() {\n            console.log(\"addUserMarker\")\n            this.editFtButton.placeUserPoint = !this.editFtButton.placeUserPoint\n            // 放置两个按钮干扰\n            if (this.editFtButton.placeDepotPoint) {\n                this.editFtButton.placeDepotPoint = !this.editFtButton.placeDepotPoint\n            }\n            this.map.on('click', (e) => {\n                if (!this.editFtButton.placeUserPoint) {\n                    console.log(\"status:  \" + this.editFtButton.placeUserPoint)\n                    return\n                }\n                let userStr = \"user \" + this.lineInfo.userLength\n                let createStamp = new Date()\n                this.inputUserLocation(userStr, createStamp, e)\n                // optmize\n                // this.markers.users[this.lineInfo.userLength] = this.$leaflet.createMarker(e.latlng, { icon: this.userIcon, title: userStr })\n                this.markers.users.push(this.$leaflet.createMarker(e.latlng, { icon: this.userIcon, title: userStr }))\n                this.lineInfo.userLength += 1\n                layerGroup.userlayer = this.$leaflet.layerGroup(this.markers.users)\n                layerGroup.userlayer.addTo(this.map)\n                // this.$leaflet.layerGroup(this.markers.users).addLayer(layerGroup.userlayer).addTo(this.map)\n            })\n            if (!this.editFtButton.placeUserPoint) {\n                // 添加涂层\n                console.log(\"off\")\n                this.map.off('click')\n            }\n        },\n        addDepotMarker() {\n            this.editFtButton.placeDepotPoint = !this.editFtButton.placeDepotPoint\n            // 防置两个干扰\n            if (this.editFtButton.placeUserPoint) {\n                this.editFtButton.placeUserPoint = !this.editFtButton.placeUserPoint\n            }\n            if (this.markers.depot === null) {\n                this.map.on('click', (e) => {\n                    if (!this.editFtButton.placeDepotPoint && this.markers.depot !== null) {\n                        console.log(\"status:  \" + this.editFtButton.placeDepotPoint)\n                        return\n                    }\n                    let depotStr = \"depot 0\"\n                    let createStamp = new Date()\n                    this.inputUserLocation(depotStr, createStamp, e)\n                    this.markers.depot = this.$leaflet.createMarker(e.latlng, { icon: this.depotIcon, title: depotStr }).addTo(this.map)\n                    layerGroup.depotlayer = L.layerGroup([this.markers.depot])\n                    layerGroup.depotlayer.addTo(this.map)\n                    if (this.markers.depot !== null) {\n                        this.editFtButton.placeDepotPoint = !this.editFtButton.placeDepotPoint\n                        console.log(this.editFtButton.placeDepotPoint)\n                        this.map.off('click')\n                    }\n                })\n            } else {\n                this.$message.warning(\"仓库已经放置过了\")\n                this.editFtButton.placeDepotPoint = !this.editFtButton.placeDepotPoint\n                console.log(this.editFtButton.placeDepotPoint + \"状态\")\n                map.off('click')\n            }\n            console.log(this.markers.depot)\n        },\n        resetMarkers() {\n            if (layerGroup.depotlayer === null && layerGroup.userlayer === null && layerGroup.linelayer === null) {\n                this.$message.warning(\"纯净状态\")\n                return\n            }\n            if (layerGroup.depotlayer !== null) {\n                layerGroup.depotlayer.remove()\n            }\n            if (layerGroup.userlayer !== null) {\n                layerGroup.userlayer.remove()\n                layerGroup.userlayer = null\n            }\n            if (layerGroup.linelayer !== null) {\n                layerGroup.linelayer.remove()\n                layerGroup.linelayer = null\n            }\n            this.editFtButton.uploadStatus = false\n            // 两个路线数组置空\n            this.lineInfo.pathline = []\n            this.lineInfo.backendLine = []\n            this.markers.users.length = 0\n            this.markers.users = []\n            this.markers.depot = null\n        },\n        async uploadAll() {\n            if (this.uploadinfo.locationinfo.length === 0 || this.uploadinfo.userinfo.length === 0) {\n                this.$message.error(\"提交不完整\")\n                return\n            }\n            if (this.editFtButton.uploadStatus) {\n                this.$message.warning(\"请勿重复提交\")\n                return\n            }\n            const { data: resuser } = await this.$http.post('mobile/savemany', this.uploadinfo.userinfo)\n            const { data: reslocate } = await this.$http.post('mobile/manylocations', this.uploadinfo.locationinfo)\n            if (resuser.status === 200 && reslocate.status === 200) {\n                this.$message.success(\"推送成功\")\n                this.editFtButton.uploadStatus = !this.editFtButton.uploadStatus\n            } else {\n                this.$message.error(\"推送失败\")\n            }\n            console.log(reslocate)\n            console.log(resuser)\n        },\n        async planRoute() {\n            if (this.editFtButton.vehicleNumber === null) {\n                this.$message.warning(\"必须提供无人机数量\")\n                return\n            }\n            let uuid = null\n            console.log(this.editFtButton.uuid)\n            if (this.editFtButton.uuid !== null) {\n                const { data: existuuid } = await this.$http.post('mobile/existuuid', qs.stringify({ uuid: this.editFtButton.uuid }))\n                // 返回的是字符串\n                if (existuuid.status === '200') {\n                    uuid = this.editFtButton.uuid\n                } else {\n                    const { data: res } = await this.$http.get('/mobile/findlastuuid')\n                    if (res.status !== 200) {\n                        this.$message.error(\"当前不存在任何用户\")\n                        return\n                    }\n                    uuid = res.results\n                }\n            } else {\n                const { data: res } = await this.$http.get('/mobile/findlastuuid')\n                if (res.status !== 200) {\n                    this.$message.error(\"当前不存在任何用户\")\n                    return\n                }\n                uuid = res.results\n            }\n            const { data: resLocation } = await this.$http.post('compute/saveAllLocation', qs.stringify({ uuid: uuid }))\n            console.log(\"保存用户\")\n            console.log(resLocation)\n            const { data: resPlan } = await this.$http.post('compute/findStaticRoutes', qs.stringify({ vehicleNum: this.editFtButton.vehicleNumber }))\n            console.log(resPlan)\n            if (resPlan.status !== 200) {\n                this.$message.error(resPlan.msg)\n            } else {\n                this.$message.success(resPlan.msg)\n                /*\n                转换为数组类型\n                 */\n                this.lineInfo.backendLine = Object.values(resPlan.results)\n                // vuex状态管理路线信息\n                this.storeUavRouteInfo(resPlan.results)\n                console.log(this.lineInfo.backendLine)\n                console.log(resPlan)\n            }\n        },\n        drawPathLine() {\n            for (let i = 0; i < this.lineInfo.backendLine.length - 1; i++) {\n                let locationArray = []\n                for (let j = 0; j < this.lineInfo.backendLine[i].length; j++) {\n                    locationArray.push(this.lineInfo.backendLine[i][j].location)\n                }\n                this.lineInfo.pathline.push(locationArray)\n            }\n            let colorPathSet = ['#00bd01', '#008080', '#BDB76B', '#DAA520', '#FF7F50', '#BC8F8F', '#48D1CC', '#87CEFA', '#9400D3']\n            layerGroup.linelayer = L.layerGroup().addTo(this.map)\n            for (let i = 0; i < this.lineInfo.pathline.length; i++) {\n                this.lineInfo.drawlineState[i] = L.polyline(this.lineInfo.pathline[i], { weight: 8, color: colorPathSet[i] }).addTo(layerGroup.linelayer)\n                // L.layerGroup(this.lineInfo.drawlineState[i]).addLayer(layerGroup.linelayer)\n                L.polylineDecorator(this.lineInfo.drawlineState[i], {\n                    patterns: [\n                        {\n                            offset: 0, repeat: 20, symbol: L.Symbol.arrowHead({\n                                pixelSize: 5,\n                                headAngle: 75,\n                                polygon: false,\n                                pathOptions: {\n                                    stroke: true,\n                                    weight: 2,\n                                    color: '#ffffff'\n                                }\n                            })\n                        }\n                    ]\n                }).addTo(layerGroup.linelayer)\n            }\n            // 绘制飞行无人机\n            this.drawUAV()\n        },\n        drawUAV() {\n            this.lineInfo.marker = new Array(this.lineInfo.pathline.length)\n            for (let i = 0; i < this.lineInfo.pathline.length; i++) {\n                // let flyingSpeed = [];\n                let flyingSpeed = new Array(this.lineInfo.pathline[i].length)\n                for (let j = 0; j < this.lineInfo.pathline[i].length; j++) {\n                    flyingSpeed[j] = 1000;\n                }\n                this.lineInfo.marker[i] = L.Marker.movingMarker(this.lineInfo.pathline[i], flyingSpeed, { icon: this.uavIcon }).addTo(this.map);\n                this.lineInfo.marker[i].bindPopup(\"无人机<b>\" + i + \"</b>的路线\", { autoClose: false, closeOnClick: false }).openPopup();\n            }\n        },\n        animateUAV() {\n            for (let uavIndex = 0; uavIndex < this.lineInfo.marker.length; uavIndex++) {\n                this.lineInfo.marker[uavIndex].start()\n            }\n        },\n        // 绘制已行走轨迹线（橙色那条）\n        updateRealLine() {\n            // newLatlngs.push(latlng)\n            // realRouteLine.setLatLngs(newLatlngs)\n        }\n    },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.map-container {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n}\n\n.buttonGroup {\n    position: absolute;\n    z-index: 1;\n    margin-top: 20px;\n    margin-left: 20px;\n}\n</style>"]}]}